"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}function _interopNamespace(e){if(e&&e.__esModule)return e;var t={};return e&&Object.keys(e).forEach((function(s){var r=Object.getOwnPropertyDescriptor(e,s);Object.defineProperty(t,s,r.get?r:{enumerable:!0,get:function(){return e[s]}})})),t.default=e,t}Object.defineProperty(exports,"__esModule",{value:!0});var postcss=require("postcss"),selectorParser=_interopDefault(require("postcss-selector-parser")),fs=require("fs"),glob=_interopDefault(require("glob")),path=_interopDefault(require("path"));const defaultOptions={css:[],content:[],defaultExtractor:e=>{const t=e.match(/[A-Za-z0-9_-]+/g)||[];return{attributes:{names:new Set,values:new Set},classes:new Set,ids:new Set,tags:new Set,undetermined:new Set(t)}},extractors:[],fontFace:!1,keyframes:!1,rejected:!1,stdin:!1,stdout:!1,variables:!1,whitelist:[],whitelistPatterns:[],whitelistPatternsChildren:[]},IGNORE_ANNOTATION_CURRENT="purgecss ignore current",IGNORE_ANNOTATION_NEXT="purgecss ignore",IGNORE_ANNOTATION_START="purgecss start ignore",IGNORE_ANNOTATION_END="purgecss end ignore",CONFIG_FILENAME="purgecss.config.js",ERROR_CONFIG_FILE_LOADING="Error loading the config file",CSS_WHITELIST=["*","::-webkit-scrollbar","::selection",":root","::before","::after"];let options,ignore=!1;const atRules={fontFace:[],keyframes:[]},usedAnimations=new Set,usedFontFaces=new Set,selectorsRemoved=new Set;async function setOptions(e=CONFIG_FILENAME){let t;try{const s=path.join(process.cwd(),e);t=await new Promise((function(e){e(_interopNamespace(require(s)))}))}catch(e){throw new Error(`${ERROR_CONFIG_FILE_LOADING} ${e.message}`)}return{...defaultOptions,...t}}function setPurgeCSSOptions(e){options=e}async function purge(e){options="object"!=typeof e?await setOptions(e):{...defaultOptions,...e};const{content:t,css:s,extractors:r}=options,n=t.filter(e=>"string"==typeof e),o=t.filter(e=>"object"==typeof e);return getPurgedCSS(s,mergeExtractorSelectors(await extractSelectorsFromFiles(n,r),extractSelectorsFromString(o,r)))}function extractSelectors(e,t){return t(e)}async function extractSelectorsFromFiles(e,t){let s={attributes:{names:new Set,values:new Set},classes:new Set,ids:new Set,tags:new Set,undetermined:new Set};for(const r of e){let e=[];try{await fs.promises.access(r,fs.constants.F_OK),e.push(r)}catch(t){e=glob.sync(r)}for(const r of e){s=mergeExtractorSelectors(s,extractSelectors(await fs.promises.readFile(r,"utf-8"),getFileExtractor(r,t)))}}return s}function extractSelectorsFromString(e,t){let s={attributes:{names:new Set,values:new Set},classes:new Set,ids:new Set,tags:new Set,undetermined:new Set};for(const{raw:r,extension:n}of e){s=mergeExtractorSelectors(s,extractSelectors(r,getFileExtractor(`.${n}`,t)))}return s}function getFileExtractor(e,t){const s=t.find(t=>t.extensions.find(t=>e.endsWith(t)));return void 0===s?options.defaultExtractor:s.extractor}async function getPurgedCSS(e,t){const s=[],r=[];for(const t of e)"string"==typeof t?r.push(...glob.sync(t)):r.push(t);for(const e of r){const r="string"==typeof e?options.stdin?e:await fs.promises.readFile(e,"utf-8"):e.raw,n=postcss.parse(r);walkThroughCSS(n,t),options.fontFace&&removeUnusedFontFaces(),options.keyframes&&removeUnusedKeyframes();const o={css:n.toString(),file:"string"==typeof e?e:void 0};"string"==typeof e&&(o.file=e),options.rejected&&(o.rejected=Array.from(selectorsRemoved),selectorsRemoved.clear()),s.push(o)}return s}function evaluateAtRule(e){if(options.keyframes&&e.name.endsWith("keyframes"))atRules.keyframes.push(e);else if(options.fontFace&&"font-face"===e.name&&e.nodes)for(const t of e.nodes)"decl"===t.type&&"font-family"===t.prop&&atRules.fontFace.push({name:stripQuotes(t.value),node:e})}async function evaluateRule(e,t){if(ignore)return;const s=e.prev();if(s&&"comment"===s.type&&isIgnoreAnnotation(s,"next"))return void s.remove();if(e.parent&&"atrule"===e.parent.type&&"keyframes"===e.parent.name)return;if("rule"!==e.type)return;if(hasIgnoreAnnotation(e))return;let r=!0;if(e.selector=selectorParser(e=>{e.walk(e=>{"selector"===e.type&&((r=shouldKeepSelector(e,t))||(options.rejected&&selectorsRemoved.add(e.toString()),e.remove()))})}).processSync(e.selector),r&&void 0!==e.nodes)for(const t of e.nodes){if("decl"!==t.type)continue;const{prop:e,value:s}=t;if(options.keyframes&&("animation"===e||"animation-name"===e))for(const e of s.split(/[\s,]+/))usedAnimations.add(e);if(options.fontFace&&"font-family"===e)for(const e of s.split(",")){const t=stripQuotes(e.trim());usedFontFaces.add(t)}}const n=e.parent;e.selector||e.remove(),isRuleEmpty(n)&&n.remove()}function isIgnoreAnnotation(e,t){switch(t){case"next":return e.text.includes(IGNORE_ANNOTATION_NEXT);case"start":return e.text.includes(IGNORE_ANNOTATION_START);case"end":return e.text.includes(IGNORE_ANNOTATION_END)}}function isRuleEmpty(e){return!!("rule"===e.type&&!e.selector||e.nodes&&!e.nodes.length||"atrule"===e.type&&(!e.nodes&&!e.params||!e.params&&e.nodes&&!e.nodes.length))}function isSelectorWhitelisted(e){return CSS_WHITELIST.includes(e)||options.whitelist&&options.whitelist.some(t=>t===e)||options.whitelistPatterns&&options.whitelistPatterns.some(t=>t.test(e))}function isSelectorWhitelistedChildren(e){return options.whitelistPatternsChildren&&options.whitelistPatternsChildren.some(t=>t.test(e))}function hasIgnoreAnnotation(e){let t=!1;return e.walkComments(e=>{e&&"comment"===e.type&&e.text.includes(IGNORE_ANNOTATION_CURRENT)&&(t=!0,e.remove())}),t}function mergeExtractorSelectors(e,t){return{attributes:{names:new Set([...e.attributes.names,...t.attributes.names]),values:new Set([...e.attributes.values,...t.attributes.values])},classes:new Set([...e.classes,...t.classes]),ids:new Set([...e.ids,...t.ids]),tags:new Set([...e.tags,...t.tags]),undetermined:new Set([...e.undetermined,...t.undetermined])}}function removeUnusedFontFaces(){for(const{name:e,node:t}of atRules.fontFace)usedFontFaces.has(e)||t.remove()}function removeUnusedKeyframes(){for(const e of atRules.keyframes)usedAnimations.has(e.params)||e.remove()}function shouldKeepSelector(e,t){if(isInPseudoClassNot(e))return!0;let s=!1;for(const r of e.nodes){if(r.value&&isSelectorWhitelistedChildren(r.value))return!0;if(r.value&&(CSS_WHITELIST.includes(r.value)||isSelectorWhitelisted(r.value)))s=!0;else{switch(r.type){case"attribute":s="value"===r.attribute||isAttributeFound(r,t);break;case"class":s=isClassFound(r,t);break;case"id":s=isIdentifierFound(r,t);break;case"tag":s=isTagFound(r,t)}if(!s)return!1}}return s}function stripQuotes(e){return e.replace(/(^["'])|(["']$)/g,"")}function walkThroughCSS(e,t){e.walk(e=>"rule"===e.type?evaluateRule(e,t):"atrule"===e.type?evaluateAtRule(e):void("comment"===e.type&&(isIgnoreAnnotation(e,"start")?(ignore=!0,e.remove()):isIgnoreAnnotation(e,"end")&&(ignore=!1,e.remove()))))}function isAttributeFound(e,t){if(!t.attributes.names.has(e.attribute)&&!t.undetermined.has(e.attribute))return!1;switch(e.operator){case"$=":return Array.from(t.attributes.values).some(t=>t.endsWith(e.value))||Array.from(t.undetermined).some(t=>t.endsWith(e.value));case"~=":case"*=":return Array.from(t.attributes.values).some(t=>t.includes(e.value))||Array.from(t.undetermined).some(t=>t.includes(e.value));case"=":return Array.from(t.attributes.values).some(t=>t===e.value)||Array.from(t.undetermined).some(t=>t===e.value);case"|=":case"^=":return Array.from(t.attributes.values).some(t=>t.startsWith(e.value))||Array.from(t.undetermined).some(t=>t.startsWith(e.value));default:return!0}}function isClassFound(e,t){return t.classes.has(e.value)||t.undetermined.has(e.value)}function isIdentifierFound(e,t){return t.ids.has(e.value)||t.undetermined.has(e.value)}function isTagFound(e,t){return t.tags.has(e.value)||t.undetermined.has(e.value)}function isInPseudoClassNot(e){return e.parent&&"pseudo"===e.parent.type&&":not"===e.parent.value}exports.default=purge,exports.defaultOptions=defaultOptions,exports.extractSelectorsFromFiles=extractSelectorsFromFiles,exports.extractSelectorsFromString=extractSelectorsFromString,exports.mergeExtractorSelectors=mergeExtractorSelectors,exports.removeUnusedFontFaces=removeUnusedFontFaces,exports.removeUnusedKeyframes=removeUnusedKeyframes,exports.selectorsRemoved=selectorsRemoved,exports.setOptions=setOptions,exports.setPurgeCSSOptions=setPurgeCSSOptions,exports.walkThroughCSS=walkThroughCSS;
